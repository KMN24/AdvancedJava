package otherThemes.lesson41;

// todo Аннотации. Создание своих аннотаций

//               Зачем создавать свои аннотации?
//Это не так часто пригождается, но знать это полезно.

//Если вы реализуете анализатор исходного кода, вы можете
//создать свои аннотации, чтобы их можно было использовать в
//коде и тем самым передавать дополнительную информацию об
//
//этом коде (те самые метаданные).
//
//Если вы реализуете свою библиотеку или фреймворк, вы
//можете создать свои аннотации, чтобы пользователь с помощью
//них взаимодействовал с вашей библиотекой или фреймворком.
//( пример: Spring Framework )
//
//В этом сценарии активно используется рефлексия.


            //Аннотации аннотирующие аннотации
//Лежат в java.lang.annotation

// @Target - указывает, к чему может быть применена аннотация. Значения
// берутся из перечисления (enum) ElementType (из того же пакета).
//      . FIELD - поле
//      . METHOD - метод
//      . TYPE - класс, интерфейс, перечисление
// @Retention - политика удержания аннотации (до какого этапа компилирования или выполнения аннотация видна). Значения лежат в
//      перечислении RetentionPolicy:
//      Source - отбрасываются при компиляции. Видны только в самом исходном коде (подойдет для анализаторов исходного кода, например)
//      CLASS - сохраняются в байт-коде, но недоступны во время работы программы
//      RUNTIME - сохраняются в байт-коде и доступны во время работы программы (с помощью рефлексии)

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

//@MethodInfo(purpose = "Print something") // ОШИБКА. Так как в Target мы указали Method - а это значит можно исп-ть анно-ю только для методов
public class Lesson41 {
    public static void main(String[] args) {
        // Создадим аннотацию
        // Для этого New -> Annotation
        // Назовем MethodInfo

    }

    @MethodInfo(author = "Mederbek", dateOfCreation = 2021, purpose = "Print Hello World")
    public void printHelloWorld(){
        System.out.println("Hello world");
    }

}
